#prerequisito
#pip install getmac

#pip install --upgrade certifi


#from ping3 import ping, verbose_ping
#ping('google.com')  # Returns delay in seconds.


import json

#import subprocess as sp
#ip = "192.168.1.110"
#status, result = sp.getstatusoutput("ping -c1 -w2" + ip)
#if(status ==0):
#    print("UP")
#else:
#    print("DOWN")

"""
from scapy.all import *

ans,unans = arping("192.168.1.110/155", verbose=0)
for s,r in ans:
    print("{} {}".format(r[Ether].src,s[ARP].pdst))
	
print ("hello")
sec = input('Premi un tasto per cotinuare...\n')

"""

"""
from getmac import get_mac_address
#eth_mac = get_mac_address(interface="eth0")
#win_mac = get_mac_address(interface="Ethernet 3")
ip_mac = get_mac_address(ip="192.168.0.1")
ip6_mac = get_mac_address(ip6="::1")
host_mac = get_mac_address(hostname="localhost")
updated_mac = get_mac_address(ip="10.0.0.1", network_request=True)

# Changing the port used for updating ARP table (UDP packet)
from getmac import getmac
getmac.PORT = 44444  # Default: 55555
print(getmac.get_mac_address(ip="192.168.0.1", network_request=True))

# Enabling debugging
from getmac import getmac
getmac.DEBUG = 2  # DEBUG level 2
print(getmac.get_mac_address(interface="Ethernet 3"))
"""

"""
import ping, socket
try:
    ping.verbose_ping('www.google.com', count=3)
    delay = ping.Ping('www.wikipedia.org', timeout=2000).do()
except socket.error, e:
    print "Ping Error:", e
    
"""
class Device:
  def __init__(self, name, mac):
    self.name = name
    self.mac = mac
    self.ip = ''
    self.isOnline = False


def checkDevices():
	# creating list        
	list = []

	# appending instances to list  
	list.append( Device('Inverter1', '48-0b-b2-51-9d-a4') )
	list.append( Device('Inverter2', '48-0b-b2-51-b7-6d') )
	list.append( Device('Inverter3', '48-0b-b2-51-49-46') )
	list.append( Device('Inverter4', '48-0b-b2-51-9d-9d') )

	list.append( Device('PcServer ', 'e0-cb-4e-eb-14-92') )
	list.append( Device('PcPosto2 ', 'e0-cb-4e-e9-4e-2d') )
	list.append( Device('PcPosto3 ', '00000000000000000') )
	#list.append( Device('PcFrigov ', '00-24-21-b6-c9-c6') )

	list.append( Device('Stampante', 'c4-65-16-db-36-aa') )
	list.append( Device('Rooter   ', '00-d0-d6-54-62-e6') )


	#
	file = open('z:/documenti/testiplog.txt', mode = 'r', encoding = 'utf-8-sig')
	lines = file.readlines()
	file.close()
	linecount=0



	for line in lines:
		linecount= linecount+1
		if linecount > 2:
			ip=line[2:15]
			mac=line[24:41]
			for obj in list: 
				if obj.mac== mac:
					obj.isOnline = True
					obj.ip = ip.strip()
					

	print ("Python code here:");

	#EMPTY THE FILE
	file = open("status.json", 'w').close()
	#REOPEN IT IN APPEND MODE
	file = open("status.json", "a")

	for obj in list:
		#pingMacAdress(obj.mac);
		print (obj.name, ' ', obj.isOnline, ' ', obj.ip);
		

	#jsonStr = json.dumps(list.__dict__)
	
	def obj_dict(obj):
		return obj.__dict__

	jsonStr = json.dumps(list, default=obj_dict)
	
	#jsonStr = json.dumps(list)
	file.write(jsonStr)
	file.close()

def sendMail():
	#send myself an email if something seems to be wrong
	import smtplib, ssl
	from socket import gaierror

	# now you can play with your code. Let’s define the SMTP server separately here:
	port = 587
	smtp_server = "smtp.gmail.com"
	login = "favoritasrl@gmail.com" # paste your login generated by Mailtrap
	password = "dagliitaliani" # paste your password generated by Mailtrap

	# specify the sender’s and receiver’s email addresses
	sender = "favoritasrl@gmail.com"
	receiver = "madbad82@gmail.com"

	# type your message: use two newlines (\n) to separate the subject from the message body, and use 'f' to  automatically insert variables in the text
	message = """\
	Subject: Allarme fotovoltaico
	To: {receiver}
	From: {sender}

	Si e verificato un problema col fotovoltaico, verifcare prego."""

	#disabilito la verifica SSL in quanto mi da problemi con google (meno sicuro)
	#context=ssl.create_default_context()
	context=ssl._create_unverified_context()

	try:
		#send your message with credentials specified above
		with smtplib.SMTP(smtp_server, port) as server:
			server.starttls(context=context)
			server.login(login, password)
			server.sendmail(sender, receiver, message)

		# tell the script to report if your message was sent or which errors need to be fixed 
		print('Inviata e-mail di allerta!')
	except (gaierror, ConnectionRefusedError):
		print('Failed to connect to the server. Bad connection settings?')
	except smtplib.SMTPServerDisconnected:
		print('Failed to connect to the server. Wrong user/password?')
	except smtplib.SMTPException as e:
		print('SMTP error occurred: ' + str(e))


#def pingMacAdress(mac):
#	from scapy.all import srp, Ether, ARP 
#	#ans,unans=srp(Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst="192.168.1.0/24"),timeout=2)
#	ans,unans=srp(Ether(dst=mac)/ARP(pdst=mac),timeout=2)

#	ip = pkt[ARP].psrc
#	print ("Mac",mac," was found at ip ",ip);

def updateArpTable():
	import subprocess
	subprocess.call([r'Z:\Documenti\testip.bat'])

def uploadStatusFile():
	import ftplib
	session = ftplib.FTP('ftp.madbad.altervista.org','madbad','faggod50')
	file = open('status.json','rb')                  # file to send
	session.storbinary('STOR status.json', file)     # send the file
	file.close()                                    # close file and FTP
	session.quit()


while True:
	updateArpTable();
	checkDevices();
	print('Uploading...');
	uploadStatusFile();
	print('Uploaded!');
	#sleep for 1 minutes
	import time;
	time.sleep(60*10)
